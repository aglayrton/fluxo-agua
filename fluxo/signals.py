from decimal import Decimal
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from django.db.models import Sum
from django.core.mail import send_mail
from django.conf import settings
from .models import FluxoAgua, ControleFluxo, MetaConsumo, EmailNotification


@receiver(post_save, sender=FluxoAgua)
def verificar_consumo_e_controlar_fluxo(sender, instance, created, **kwargs):
    """
    Signal que verifica o consumo di√°rio ap√≥s cada registro de FluxoAgua.
    Se o consumo ultrapassar a meta e o desligamento autom√°tico ainda n√£o ocorreu hoje,
    desliga o fluxo automaticamente.
    """
    if not created:
        return

    hoje = timezone.localdate()

    # Busca a meta atual (usando o m√©todo singleton)
    meta = MetaConsumo.get_meta_atual()
    if not meta:
        return  # Se n√£o h√° meta configurada, n√£o faz nada

    # Calcula o consumo total do dia
    consumo_hoje = FluxoAgua.objects.filter(
        data_hora__date=hoje
    ).aggregate(total=Sum('valor_diferenca'))['total'] or Decimal('0.00')

    # Busca ou cria o controle de fluxo do dia
    # IMPORTANTE: Cada dia √© independente. Defaults reseta todas as flags para um novo dia.
    controle, created_controle = ControleFluxo.objects.get_or_create(
        data=hoje,
        defaults={
            'status': 'on',
            'desligamento_automatico_ocorreu': False,
            'usuario_alterou_manualmente': False,
            'email_enviado_hoje': False
        }
    )

    # Se foi criado agora (novo dia), todas as flags come√ßam zeradas
    # O controle de ontem (se existir) n√£o afeta o de hoje

    # Verifica se deve desligar automaticamente
    if consumo_hoje >= meta.meta_diaria_litros:
        # S√≥ desliga se ainda n√£o desligou automaticamente hoje
        # E se o usu√°rio n√£o alterou manualmente HOJE
        if not controle.desligamento_automatico_ocorreu and not controle.usuario_alterou_manualmente:
            controle.status = 'off'
            controle.desligamento_automatico_ocorreu = True
            controle.save()

        # Envia email de notifica√ß√£o se ainda n√£o enviou HOJE
        # Esta verifica√ß√£o garante que mesmo com v√°rias leituras ultrapassando a meta,
        # o email ser√° enviado apenas uma vez por dia
        if not controle.email_enviado_hoje:
            enviar_notificacao_email(consumo_hoje, meta.meta_diaria_litros, hoje)
            controle.email_enviado_hoje = True
            controle.save()


def enviar_notificacao_email(consumo_atual, meta_diaria, data):
    """
    Envia email de notifica√ß√£o quando o consumo ultrapassa a meta.
    Envia apenas uma vez por dia.
    """
    # Busca todos os emails ativos
    emails_ativos = EmailNotification.objects.filter(ativo=True).values_list('email', flat=True)

    if not emails_ativos:
        return  # N√£o h√° emails cadastrados

    # Monta o assunto e corpo do email
    assunto = f"‚ö†Ô∏è Alerta: Meta de Consumo de √Ågua Ultrapassada - {data.strftime('%d/%m/%Y')}"

    corpo = f"""
    Ol√°,

    Este √© um alerta autom√°tico do Sistema de Controle de Fluxo de √Ågua.

    üìä RESUMO DO CONSUMO:

    ‚Ä¢ Data: {data.strftime('%d/%m/%Y')}
    ‚Ä¢ Meta Di√°ria: {meta_diaria} litros
    ‚Ä¢ Consumo Atual: {consumo_atual} litros
    ‚Ä¢ Excedente: {consumo_atual - meta_diaria} litros ({((consumo_atual - meta_diaria) / meta_diaria * 100):.1f}%)

    ‚ö†Ô∏è O consumo de √°gua ultrapassou a meta di√°ria estabelecida.
    O fluxo de √°gua foi automaticamente DESLIGADO para evitar desperd√≠cio.

    üîß A√á√ïES DISPON√çVEIS:
    ‚Ä¢ Voc√™ pode reativar manualmente o fluxo atrav√©s do painel de controle
    ‚Ä¢ Acesse: https://fluxo-agua.kauan.space/docs/swagger/
    ‚Ä¢ Endpoint: PATCH /controle-fluxo/alterar_status/

    üí° DICAS PARA ECONOMIA:
    ‚Ä¢ Verifique poss√≠veis vazamentos
    ‚Ä¢ Revise o uso de √°gua durante o dia
    ‚Ä¢ Considere ajustar a meta di√°ria se necess√°rio

    ---
    Esta √© uma mensagem autom√°tica. N√£o responda a este email.
    Sistema de Controle de Fluxo de √Ågua
    """

    try:
        send_mail(
            subject=assunto,
            message=corpo,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=list(emails_ativos),
            fail_silently=False,
        )
        print(f"‚úÖ Email de alerta enviado para {len(emails_ativos)} destinat√°rio(s)")
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {str(e)}")
